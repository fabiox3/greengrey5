{# templates/lucky/number.html.twig #}
{% extends "base.html.twig" %}
{% block title %}Index{% endblock %}
{% block head %}
    {{ parent() }}
    <style type="text/css">
        .important { color: #336699; }
    </style>
{% endblock %}
{% block content %}
    <div class="container">
        <br>
        <div class="jumbotron p-4 p-md-5 text-white rounded bg-dark">
            <div class="col-md-6 px-0">
                <h1 class="display-4 font-italic">GreenGrey v2.0</h1>
                <p class="lead my-3">Azienda Agricola Fabio Picciau<br>Software gestionale per oliveto</p>
            </div>
        </div>
        <div class="row mb-2">
            <div class="col-md-6">
                <div class="row no-gutters border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative">
                    <div class="col p-4 d-flex flex-column position-static">
                        <strong class="d-inline-block mb-2 text-primary">Oliveto</strong>
                        <h3 class="mb-0">Gestione oliveto</h3>
                        <p class="card-text mb-auto">Dati relativi agli alberi, produzione, potature, ecc.</p>
                        <a href="{{ path('oliveto') }}" class="stretched-link">Entra</a>
                    </div>
                    <div class="col-auto d-none d-lg-block">
                        <svg class="bd-placeholder-img" width="200" height="250" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef" dy=".3em">Thumbnail</text></svg>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row no-gutters border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative">
                    <div class="col p-4 d-flex flex-column position-static">
                        <strong class="d-inline-block mb-2 text-success">Raccolta</strong>
                        <h3 class="mb-0">Raccolta annuale</h3>
                        <p class="mb-auto">Dati annuali relativi alla raccolta, produttivit√†, costi, ecc.</p>
                        <a href="{{ path('raccolta_index') }}" class="stretched-link">Entra</a>
                    </div>
                    <div class="col-auto d-none d-lg-block">
                        <svg class="bd-placeholder-img" width="200" height="250" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef" dy=".3em">Thumbnail</text></svg>
                    </div>
                </div>
            </div>
            <div style="width: 100vw;height: 100vh;" id="mapContainer"></div>
            <script>

                function addMarkerToGroup(group, coordinate, html) {
                    var marker = new H.map.Marker(coordinate);
                    // add custom data to the marker
                    marker.setData(html);
                    group.addObject(marker);
                }

                function addInfoBubble(map) {
                    var group = new H.map.Group();

                    map.addObject(group);

                    group.addEventListener('tap', function (evt) {
                        var bubble = new H.ui.InfoBubble(evt.target.getGeometry(), {
                            content: evt.target.getData()
                        });
                        ui.addBubble(bubble);
                    }, false);

                    getDataFromAPI(group);
                }

                function getDataFromAPI(group) {
                    $.ajax({
                        type: 'GET',
                        url: 'http://127.0.0.1:8000/api/olivetolistapi',
                        dataType: 'json',
                        success: function(data) {
                            $.each(data, function (k, v) {
                                $.each(v, function () {
                                    addMarkerToGroup(group, {lat: v.latitude, lng: v.longitude},
                                        '<div><a href="{{ path('oliveto')}}/details/' + v.code + '">' + v.code +  '</a></div>' +
                                        '<div>Fila ' + v.fieldrow +  '<br />Settore: ' + v.sector + '</div>');
                                })
                            });
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            alert(jqXHR.status);
                        },
                    });
                }

                function updatePosition(position) {

                    var hereIAmCcoordinates = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    var icon = new H.map.Icon('images/orange-dot.png');
                    var marker = new H.map.Marker(hereIAmCcoordinates, { icon: icon });
                    map.addObject(marker);
                    map.setCenter(hereIAmCcoordinates);
                }

                //Step 1: initialize communication with the platform
                // Replace variable YOUR_API_KEY with your own apikey
                var platform = new H.service.Platform({
                    apikey: 'T6qBBT0dhbNK2XG37vnCQj_6RIbF6jogVxzusf1CsFU'
                });
                var defaultLayers = platform.createDefaultLayers();
                //Step 2: initialize a map - this map is centered over Europe
                var map = new H.Map(document.getElementById('mapContainer'),
                    defaultLayers.vector.normal.map,
                    {
                        center: { lat: 39.322906, lng: 9.059414 },
                        zoom: 19,
                        pixelRatio: window.devicePixelRatio || 1
                    }
                );
                // This adds a resize listener to make sure that the map occupies the whole container
                window.addEventListener('resize', () => map.getViewPort().resize());
                //Step 3: make the map interactive
                // MapEvents enables the event system
                // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
                var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

                // geolocation
                if( navigator.geolocation ) {
                    navigator.geolocation.getCurrentPosition(position => {
                        map.setCenter({
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        });
                    });
                    navigator.geolocation.watchPosition(updatePosition);
                }

                // Create the default UI components
                var ui = H.ui.UI.createDefault(map, defaultLayers);

                addInfoBubble(map);

            </script>
        </div>
    </div>
{% endblock %}